// Generated by view binder compiler. Do not edit!
package amc.g11.climbharder.databinding;

import amc.g11.climbharder.R;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.LinearLayout;
import android.widget.TextView;
import android.widget.TimePicker;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentCreateScheduleBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final Button buttonSubmitNewSchedule;

  @NonNull
  public final CheckBox checkFri;

  @NonNull
  public final CheckBox checkMon;

  @NonNull
  public final CheckBox checkSat;

  @NonNull
  public final CheckBox checkSun;

  @NonNull
  public final CheckBox checkThu;

  @NonNull
  public final CheckBox checkTue;

  @NonNull
  public final CheckBox checkWed;

  @NonNull
  public final LinearLayout dayOptions;

  @NonNull
  public final TextView daysLabel;

  @NonNull
  public final TextView timeLabel;

  @NonNull
  public final TimePicker timePicker;

  @NonNull
  public final LinearLayout timepickerLayout;

  @NonNull
  public final TextView title;

  private FragmentCreateScheduleBinding(@NonNull ConstraintLayout rootView,
      @NonNull Button buttonSubmitNewSchedule, @NonNull CheckBox checkFri,
      @NonNull CheckBox checkMon, @NonNull CheckBox checkSat, @NonNull CheckBox checkSun,
      @NonNull CheckBox checkThu, @NonNull CheckBox checkTue, @NonNull CheckBox checkWed,
      @NonNull LinearLayout dayOptions, @NonNull TextView daysLabel, @NonNull TextView timeLabel,
      @NonNull TimePicker timePicker, @NonNull LinearLayout timepickerLayout,
      @NonNull TextView title) {
    this.rootView = rootView;
    this.buttonSubmitNewSchedule = buttonSubmitNewSchedule;
    this.checkFri = checkFri;
    this.checkMon = checkMon;
    this.checkSat = checkSat;
    this.checkSun = checkSun;
    this.checkThu = checkThu;
    this.checkTue = checkTue;
    this.checkWed = checkWed;
    this.dayOptions = dayOptions;
    this.daysLabel = daysLabel;
    this.timeLabel = timeLabel;
    this.timePicker = timePicker;
    this.timepickerLayout = timepickerLayout;
    this.title = title;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentCreateScheduleBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentCreateScheduleBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_create_schedule, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentCreateScheduleBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.button_submit_new_schedule;
      Button buttonSubmitNewSchedule = ViewBindings.findChildViewById(rootView, id);
      if (buttonSubmitNewSchedule == null) {
        break missingId;
      }

      id = R.id.checkFri;
      CheckBox checkFri = ViewBindings.findChildViewById(rootView, id);
      if (checkFri == null) {
        break missingId;
      }

      id = R.id.checkMon;
      CheckBox checkMon = ViewBindings.findChildViewById(rootView, id);
      if (checkMon == null) {
        break missingId;
      }

      id = R.id.checkSat;
      CheckBox checkSat = ViewBindings.findChildViewById(rootView, id);
      if (checkSat == null) {
        break missingId;
      }

      id = R.id.checkSun;
      CheckBox checkSun = ViewBindings.findChildViewById(rootView, id);
      if (checkSun == null) {
        break missingId;
      }

      id = R.id.checkThu;
      CheckBox checkThu = ViewBindings.findChildViewById(rootView, id);
      if (checkThu == null) {
        break missingId;
      }

      id = R.id.checkTue;
      CheckBox checkTue = ViewBindings.findChildViewById(rootView, id);
      if (checkTue == null) {
        break missingId;
      }

      id = R.id.checkWed;
      CheckBox checkWed = ViewBindings.findChildViewById(rootView, id);
      if (checkWed == null) {
        break missingId;
      }

      id = R.id.day_options;
      LinearLayout dayOptions = ViewBindings.findChildViewById(rootView, id);
      if (dayOptions == null) {
        break missingId;
      }

      id = R.id.days_label;
      TextView daysLabel = ViewBindings.findChildViewById(rootView, id);
      if (daysLabel == null) {
        break missingId;
      }

      id = R.id.time_label;
      TextView timeLabel = ViewBindings.findChildViewById(rootView, id);
      if (timeLabel == null) {
        break missingId;
      }

      id = R.id.timePicker;
      TimePicker timePicker = ViewBindings.findChildViewById(rootView, id);
      if (timePicker == null) {
        break missingId;
      }

      id = R.id.timepicker_layout;
      LinearLayout timepickerLayout = ViewBindings.findChildViewById(rootView, id);
      if (timepickerLayout == null) {
        break missingId;
      }

      id = R.id.title;
      TextView title = ViewBindings.findChildViewById(rootView, id);
      if (title == null) {
        break missingId;
      }

      return new FragmentCreateScheduleBinding((ConstraintLayout) rootView, buttonSubmitNewSchedule,
          checkFri, checkMon, checkSat, checkSun, checkThu, checkTue, checkWed, dayOptions,
          daysLabel, timeLabel, timePicker, timepickerLayout, title);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
